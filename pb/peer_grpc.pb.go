// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/peer.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TrackerService_JoinNetwork_FullMethodName  = "/peer.TrackerService/JoinNetwork"
	TrackerService_LeaveNetwork_FullMethodName = "/peer.TrackerService/LeaveNetwork"
	TrackerService_GetFileNodes_FullMethodName = "/peer.TrackerService/GetFileNodes"
	TrackerService_PutFile_FullMethodName      = "/peer.TrackerService/PutFile"
)

// TrackerServiceClient is the client API for TrackerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Servicio para el Tracker, que maneja la conexi贸n y gesti贸n de los nodos.
type TrackerServiceClient interface {
	// Unirse a la red, ya sea para subir o descargar un archivo.
	JoinNetwork(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error)
	// Salir de la red.
	LeaveNetwork(ctx context.Context, in *LeaveRequest, opts ...grpc.CallOption) (*LeaveResponse, error)
	// Solicitar la lista de nodos que tienen los chunks de un archivo.
	GetFileNodes(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileNodesResponse, error)
	// Manejar la subida de un archivo, fragmentar y distribuir chunks.
	PutFile(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error)
}

type trackerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTrackerServiceClient(cc grpc.ClientConnInterface) TrackerServiceClient {
	return &trackerServiceClient{cc}
}

func (c *trackerServiceClient) JoinNetwork(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinResponse)
	err := c.cc.Invoke(ctx, TrackerService_JoinNetwork_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackerServiceClient) LeaveNetwork(ctx context.Context, in *LeaveRequest, opts ...grpc.CallOption) (*LeaveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeaveResponse)
	err := c.cc.Invoke(ctx, TrackerService_LeaveNetwork_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackerServiceClient) GetFileNodes(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileNodesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileNodesResponse)
	err := c.cc.Invoke(ctx, TrackerService_GetFileNodes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackerServiceClient) PutFile(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PutResponse)
	err := c.cc.Invoke(ctx, TrackerService_PutFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrackerServiceServer is the server API for TrackerService service.
// All implementations must embed UnimplementedTrackerServiceServer
// for forward compatibility.
//
// Servicio para el Tracker, que maneja la conexi贸n y gesti贸n de los nodos.
type TrackerServiceServer interface {
	// Unirse a la red, ya sea para subir o descargar un archivo.
	JoinNetwork(context.Context, *JoinRequest) (*JoinResponse, error)
	// Salir de la red.
	LeaveNetwork(context.Context, *LeaveRequest) (*LeaveResponse, error)
	// Solicitar la lista de nodos que tienen los chunks de un archivo.
	GetFileNodes(context.Context, *FileRequest) (*FileNodesResponse, error)
	// Manejar la subida de un archivo, fragmentar y distribuir chunks.
	PutFile(context.Context, *PutRequest) (*PutResponse, error)
	mustEmbedUnimplementedTrackerServiceServer()
}

// UnimplementedTrackerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTrackerServiceServer struct{}

func (UnimplementedTrackerServiceServer) JoinNetwork(context.Context, *JoinRequest) (*JoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinNetwork not implemented")
}
func (UnimplementedTrackerServiceServer) LeaveNetwork(context.Context, *LeaveRequest) (*LeaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveNetwork not implemented")
}
func (UnimplementedTrackerServiceServer) GetFileNodes(context.Context, *FileRequest) (*FileNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileNodes not implemented")
}
func (UnimplementedTrackerServiceServer) PutFile(context.Context, *PutRequest) (*PutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutFile not implemented")
}
func (UnimplementedTrackerServiceServer) mustEmbedUnimplementedTrackerServiceServer() {}
func (UnimplementedTrackerServiceServer) testEmbeddedByValue()                        {}

// UnsafeTrackerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrackerServiceServer will
// result in compilation errors.
type UnsafeTrackerServiceServer interface {
	mustEmbedUnimplementedTrackerServiceServer()
}

func RegisterTrackerServiceServer(s grpc.ServiceRegistrar, srv TrackerServiceServer) {
	// If the following call pancis, it indicates UnimplementedTrackerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TrackerService_ServiceDesc, srv)
}

func _TrackerService_JoinNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackerServiceServer).JoinNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrackerService_JoinNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackerServiceServer).JoinNetwork(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackerService_LeaveNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackerServiceServer).LeaveNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrackerService_LeaveNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackerServiceServer).LeaveNetwork(ctx, req.(*LeaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackerService_GetFileNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackerServiceServer).GetFileNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrackerService_GetFileNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackerServiceServer).GetFileNodes(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackerService_PutFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackerServiceServer).PutFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrackerService_PutFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackerServiceServer).PutFile(ctx, req.(*PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TrackerService_ServiceDesc is the grpc.ServiceDesc for TrackerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrackerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "peer.TrackerService",
	HandlerType: (*TrackerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JoinNetwork",
			Handler:    _TrackerService_JoinNetwork_Handler,
		},
		{
			MethodName: "LeaveNetwork",
			Handler:    _TrackerService_LeaveNetwork_Handler,
		},
		{
			MethodName: "GetFileNodes",
			Handler:    _TrackerService_GetFileNodes_Handler,
		},
		{
			MethodName: "PutFile",
			Handler:    _TrackerService_PutFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/peer.proto",
}

const (
	NodeService_RequestChunk_FullMethodName = "/peer.NodeService/RequestChunk"
	NodeService_SendChunk_FullMethodName    = "/peer.NodeService/SendChunk"
)

// NodeServiceClient is the client API for NodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Servicio para los nodos que manejan la subida y descarga de archivos.
type NodeServiceClient interface {
	// Solicitar un chunk de un archivo a otro nodo.
	RequestChunk(ctx context.Context, in *ChunkRequest, opts ...grpc.CallOption) (*ChunkResponse, error)
	// Enviar un chunk de un archivo a otro nodo.
	SendChunk(ctx context.Context, in *ChunkSendRequest, opts ...grpc.CallOption) (*ChunkSendResponse, error)
}

type nodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeServiceClient(cc grpc.ClientConnInterface) NodeServiceClient {
	return &nodeServiceClient{cc}
}

func (c *nodeServiceClient) RequestChunk(ctx context.Context, in *ChunkRequest, opts ...grpc.CallOption) (*ChunkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChunkResponse)
	err := c.cc.Invoke(ctx, NodeService_RequestChunk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) SendChunk(ctx context.Context, in *ChunkSendRequest, opts ...grpc.CallOption) (*ChunkSendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChunkSendResponse)
	err := c.cc.Invoke(ctx, NodeService_SendChunk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeServiceServer is the server API for NodeService service.
// All implementations must embed UnimplementedNodeServiceServer
// for forward compatibility.
//
// Servicio para los nodos que manejan la subida y descarga de archivos.
type NodeServiceServer interface {
	// Solicitar un chunk de un archivo a otro nodo.
	RequestChunk(context.Context, *ChunkRequest) (*ChunkResponse, error)
	// Enviar un chunk de un archivo a otro nodo.
	SendChunk(context.Context, *ChunkSendRequest) (*ChunkSendResponse, error)
	mustEmbedUnimplementedNodeServiceServer()
}

// UnimplementedNodeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNodeServiceServer struct{}

func (UnimplementedNodeServiceServer) RequestChunk(context.Context, *ChunkRequest) (*ChunkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestChunk not implemented")
}
func (UnimplementedNodeServiceServer) SendChunk(context.Context, *ChunkSendRequest) (*ChunkSendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendChunk not implemented")
}
func (UnimplementedNodeServiceServer) mustEmbedUnimplementedNodeServiceServer() {}
func (UnimplementedNodeServiceServer) testEmbeddedByValue()                     {}

// UnsafeNodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeServiceServer will
// result in compilation errors.
type UnsafeNodeServiceServer interface {
	mustEmbedUnimplementedNodeServiceServer()
}

func RegisterNodeServiceServer(s grpc.ServiceRegistrar, srv NodeServiceServer) {
	// If the following call pancis, it indicates UnimplementedNodeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NodeService_ServiceDesc, srv)
}

func _NodeService_RequestChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).RequestChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeService_RequestChunk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).RequestChunk(ctx, req.(*ChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_SendChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChunkSendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).SendChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeService_SendChunk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).SendChunk(ctx, req.(*ChunkSendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NodeService_ServiceDesc is the grpc.ServiceDesc for NodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "peer.NodeService",
	HandlerType: (*NodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestChunk",
			Handler:    _NodeService_RequestChunk_Handler,
		},
		{
			MethodName: "SendChunk",
			Handler:    _NodeService_SendChunk_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/peer.proto",
}
